const { Router } = require("express");
const UsersDBModel = require("../DB/UsersDBModel");
const bcrypt = require("bcrypt");
const passGen = require("generate-password");
let saltRounds = 10;
const {mailTransporter} = require('../helpers/smtp_config')

const router = Router();

router.get("/GetAllUsersList", async (req, res) => {
  try {
    const allUsers = await UsersDBModel.find({}, { _id: 0, username: true });
    res.send(allUsers);
  } catch (err) {
    console.error("Error Regarding GetAllUsersList", err);
  }
});

router.post("/AddAccount", async (req, res) => {
  let user_data = req.body;
  try {
    let result = await UsersDBModel.findOne({ username: user_data.username });
    if (result) {
      res.send("Username Taken");
      console.log("Username Taken");
    } else {
      bcrypt.genSalt(saltRounds, async (err, salt) => {
        let newGenPass = passGen.generate();
        bcrypt.hash(newGenPass, salt, async (err, hash) => {
          user_data.password = hash;
          const newUser = new UsersDBModel(user_data);
          console.log(newUser);
          newUser.save();
          let mailDetails = {
            from: "smp.newpass@gmail.com",
            to: user_data.email,
            subject: "New Password Generated By Request",
            text: `Your new Password is => ${newGenPass}`,
          };
          mailTransporter.sendMail(mailDetails, function (err, data) {
            if (err) {console.log("Error Occurs", err);}
          });
          console.log("User inserted");
          res.send(newUser)
        });
      });
    }
  } catch (error) {
    console.error(error.message);
  }
});

router.get("/GetUserData/:username", async (req, res) => {
  let username = req.params.username;
  try {
    let account_data = await UsersDBModel.findOne({ username: username });
    res.send(account_data);
  } catch (err) {
    console.error("Error in GetUserData",err);
  }
});

router.get("/GetUserID/:username", async (req, res) => {
  let username_fe = req.params.username;
  try {
    const userID = await UsersDBModel.findOne(
      { username: username_fe },
      { _id: 1 }
    );
    res.send(userID);
  } catch (err) {
    console.error(err);
  }
});

router.post("/Signin", async (req, res) => {
  let entred_credentials = req.body;
  try {
    let doesUserPassExist = await UsersDBModel.findOne({username: entred_credentials.uname});

    if (doesUserPassExist) {
       const resultOfPass = await bcrypt.compare(entred_credentials.passwd, doesUserPassExist.password)
        if (resultOfPass === true) {
            res.send(true)
        } else {
            res.send(false)
        }
    } else {
        res.send(false)
    }
  } catch (err) {
    console.error('Error in Login',err);
  }
});

router.post("/updateMail/:id", async (req, res) => {
  let id = req.params.id;
  let newMail = req.body;
  // console.log(newMail.newMail)
  let checkIfMailisCorrect = await UsersDBModel.findOne({ _id: id });
  try {
    if (checkIfMailisCorrect) {
      await UsersDBModel.updateOne({ _id: id }, { email: newMail.newMail });
      res.send(true);
    } else {
    }
  } catch (err) {
    console.error(err);
  }
});

router.post("/updatePassword/:id", async (req, res) => {
  let id = req.params.id;
  let newPassword = req.body;
  // console.log(newPassword.newPassword)
  let checkIfPasswordisCorrect = await UsersDBModel.findOne({ _id: id });
  try {
    if (checkIfPasswordisCorrect) {
      bcrypt.genSalt(saltRounds, async(err, salt) => {
        bcrypt.hash(newPassword.newPassword, salt ,async (err, hash) => {
          await UsersDBModel.updateOne({_id:id}, {password: hash})
          res.send(true)
        })
      })
    } else {
    }
  } catch (err) {
    console.error(err);
  }
});

router.post("/avatarUploader/:userID", async (req, res) => {
  const file = req.files.image;
  let userID = req.params.userID;
  let path = `uploads/avatars/${userID}`;
  try {
    file.mv(path, async (err) => {
      if (err) {
        console.log(err);
      } else {
        await UsersDBModel.updateOne({ _id: userID }, { avatar: userID });
        console.log(`User with ID: ${userID} uploaded a file: ${file.name}`);
      }
    });
  } catch (err) {
    console.error("Error in avatarUploader", err);
  }
});

module.exports = router;
